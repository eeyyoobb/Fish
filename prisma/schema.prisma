// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model Admin {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  username    String   @unique
  wallet      Int      @default(0)
  balance     Int      @default(0)  
  clerkId     String   @unique
}

model Child {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  username    String       @unique
  name        String
  surname     String
  email       String       @unique
  phone       String?      @unique
  address     String?
  img         String?
  fatherId    String?
  tribeId     String?      @db.ObjectId
  tribe       Tribe?       @relation(fields: [tribeId], references: [id])
  gradeId     String?      @db.ObjectId
  grade       Grade?       @relation(fields: [gradeId], references: [id])
  createdAt   DateTime     @default(now())

  clerkId     String       @unique
  attendances Attendance[]
  results     Result[]
  wallet      Int           @default(0)
  balance     Int           @default(0)
  account     String?        
  monetization  Boolean     @default(false)
}

model Creator {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId   String   @unique
  username  String   @unique
  name      String
  surname   String
  email     String   @unique
  phone     String?  @unique
  address   String?
  img       String?
  //bloodType String
  //sex       UserSex
  createdAt DateTime @default(now())
  //categories CategoryCreator[]
  //birthday  DateTime
  wallet      Int    @default(0) 
  balance     Int    @default(0)
  account     String?
  tribeId     String?      @db.ObjectId
  tribe       Tribe?       @relation(fields: [tribeId], references: [id])
  gradeId     String?      @db.ObjectId
  grade       Grade?       @relation(fields: [gradeId], references: [id])
  announcements Announcement[]
  fatherId    String?
  attendances Attendance[]
  results     Result[]
  monetization  Boolean     @default(false)
  
}

model Parent {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  clerkId   String    @unique
  username  String    @unique
  name      String
  surname   String
  fatherId   String?
  img       String?
  email     String    @unique
  phone     String?   @unique
  address   String?
  createdAt DateTime  @default(now())
  tribeId     String?      @db.ObjectId
  tribe       Tribe?       @relation(fields: [tribeId], references: [id])
  wallet      Int    @default(0)
  balance     Int    @default(0)
  account     String ?
  monetization  Boolean     @default(true)
}

model Grade {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  level     Int @unique
  tribes    Tribe[]
  children  Child[]
  creator   Creator[]
}

model Tribe {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String @unique
  capacity Int
  supervisor    Parent[]
  gradeId       String @db.ObjectId
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]
  children      Child[]
  creator       Creator[]
}

model Category {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String   @unique
  Tasks      Task[]
  Creators   CategoryCreator[]
}

model CategoryCreator {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  categoryId String   @db.ObjectId
  category   Category  @relation(fields: [categoryId], references: [id])
  
  // CreatorId String   @db.ObjectId
  // Creator   Creator  @relation(fields: [CreatorId], references: [id])
}

model Task{
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  categoryId        String    @db.ObjectId
  category          Category   @relation(fields: [categoryId], references: [id])
  description        String
  ad1                String
  ad2                String
  ad3                String
  track              String
  trackmin           String
  track2             String
  trackmin2          String
  isUnderstand       Boolean   @default(false)
  link               String?
  reward             Int
  duration           String 
  threshold          Int
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @default(now()) @updatedAt @map("updated_at")
  
  completionCount    Int             @default(0) // Track how many users have completed the task
  isCompleted        Boolean         @default(false)
  completions        TaskCompletion[] 
  ownerId            String 

}

model TaskCompletion {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  taskId         String   @db.ObjectId
  task           Task     @relation(fields: [taskId], references: [id])
  userId         String
  isCompleted    Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  platformUserId String?
  approvalStatus ApprovalStatus @default(PENDING) 
  reward         Int
}

model Exam {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  startTime DateTime
  endTime   DateTime

  // TaskId  String   @db.ObjectId
  // Task    Task   @relation(fields: [TaskId], references: [id])
  results   Result[]
}

model Assignment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  startDate DateTime
  dueDate   DateTime

  //TaskId  String   @db.ObjectId
 // Task    Task   @relation(fields: [TaskId], references: [id])
  results   Result[]
}

model Result {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  score Int

  examId       String?    @db.ObjectId
  exam         Exam?      @relation(fields: [examId], references: [id])
  assignmentId String?    @db.ObjectId
  assignment   Assignment?@relation(fields: [assignmentId], references: [id])
  childId      String     @db.ObjectId
  child        Child    @relation(fields: [childId], references: [id])
  creatorId      String     @db.ObjectId
  creator        Creator    @relation(fields: [creatorId], references: [id])
  
}

model Attendance {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  present   Boolean

  childId String   @db.ObjectId
  child   Child  @relation(fields: [childId], references: [id])
  creatorId      String     @db.ObjectId
  creator        Creator    @relation(fields: [creatorId], references: [id])
  //TaskId  String   @db.ObjectId
  //Task    Task   @relation(fields: [TaskId], references: [id])
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  tribeId     String?   @db.ObjectId
  tribe       Tribe?    @relation(fields: [tribeId], references: [id])
}

model Announcement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  date        DateTime

  tribeId     String?   @db.ObjectId
  tribe       Tribe?    @relation(fields: [tribeId], references: [id])
  creatorId    String?   @db.ObjectId
  creator      Creator?    @relation(fields: [creatorId], references: [id])
}


enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum ApprovalStatus {
  PENDING
  APPROVED
  DECLINED
}

model Transaction {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  amount          Float
  type            TransactionType
  status          TransactionStatus @default(PENDING)
  description     String?
  serviceFee      Float?    // For transfer transactions
  fromUserId      String?   // For transfer transactions
  toUserId        String?   // For transfer transactions
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum TransactionType {
  WITHDRAWAL
  TOPUP
  TRANSFER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model Adjust {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  ywatch          Float?
  ylike           Float?
  ysub            Float?
  join            Float?
  fee             Int?
  mtask           Int?
  mchild          Int?
  mcreate         Int?
  Account         String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}




