// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model Admin {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  username  String @unique
  wallet      Int    @default(0) 
  clerkId    String  @unique
}

model Child {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  fatherId    String
  createdAt   DateTime     @default(now())
  // parentId    String       @db.ObjectId
  // parent      Parent       @relation(fields: [parentId], references: [id])
  clerkId     String        @unique
  attendances Attendance[]
  results     Result[]
  wallet      Int    @default(0)
}

model Creator {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId   String   @unique
  username  String   @unique
  name      String
  surname   String
  email     String?  @unique
  phone     String?  @unique
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime @default(now())
  categories CategoryCreator[]
  tasks     Task[]
  birthday  DateTime
  wallet      Int    @default(0) 
}

model Parent {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  clerkId   String
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  // children   Child[]
  tribes    Tribe[]
  wallet      Int    @default(0) 
}

model Grade {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  level Int @unique

  tribes   Tribe[]
}

model Tribe {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String @unique
  capacity Int

  supervisorId  String?   @db.ObjectId
  supervisor    Parent?   @relation(fields: [supervisorId], references: [id])
  gradeId       String @db.ObjectId
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]
}

model Category {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String   @unique
  Tasks  Task[]
  Creators CategoryCreator[]
}

model CategoryCreator {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  categoryId String   @db.ObjectId
  category   Category  @relation(fields: [categoryId], references: [id])
  
  CreatorId String   @db.ObjectId
  Creator   Creator  @relation(fields: [CreatorId], references: [id])
}

model Task{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  day           Day
  startTime     DateTime
  endTime       DateTime

  categoryId    String    @db.ObjectId
  category      Category   @relation(fields: [categoryId], references: [id])
  creatorId     String    @db.ObjectId
  creator       Creator   @relation(fields: [creatorId], references: [id])
  //exams         Exam[]  
  //assignments   Assignment[] 
  //attendances   Attendance[]
  title         String?
  description   String?
  //isImportant   Boolean   @default(false)
  link          String?
  reward        Int
  code          String?
  threshold     Int
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at")
  
  completionCount Int         @default(0) // Track how many users have completed the task
  isCompleted Boolean         @default(false)
  completions TaskCompletion[] 
}

model TaskCompletion {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  taskId   String   @db.ObjectId
  task     Task     @relation(fields: [taskId], references: [id])
  userId   String   
  completedAt DateTime? 
  isCompleted Boolean         @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Exam {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  startTime DateTime
  endTime   DateTime

  // TaskId  String   @db.ObjectId
  // Task    Task   @relation(fields: [TaskId], references: [id])
  results   Result[]
}

model Assignment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  startDate DateTime
  dueDate   DateTime

  //TaskId  String   @db.ObjectId
 // Task    Task   @relation(fields: [TaskId], references: [id])
  results   Result[]
}

model Result {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  score Int

  examId       String?    @db.ObjectId
  exam         Exam?      @relation(fields: [examId], references: [id])
  assignmentId String?    @db.ObjectId
  assignment   Assignment?@relation(fields: [assignmentId], references: [id])
  childId      String     @db.ObjectId
  child        Child    @relation(fields: [childId], references: [id])
}

model Attendance {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  present   Boolean

  childId String   @db.ObjectId
  child   Child  @relation(fields: [childId], references: [id])
  //TaskId  String   @db.ObjectId
  //Task    Task   @relation(fields: [TaskId], references: [id])
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  tribeId     String?   @db.ObjectId
  tribe       Tribe?    @relation(fields: [tribeId], references: [id])
}

model Announcement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  date        DateTime

  tribeId     String?   @db.ObjectId
  tribe       Tribe?    @relation(fields: [tribeId], references: [id])
}


enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}


